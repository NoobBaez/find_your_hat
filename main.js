// Require the lib, get a working terminal
var term = require('terminal-kit').terminal;
const prompt = require('prompt-sync')({ sigint: true });

const GAME_OVER = `
#####                          #######                      
#     #   ##   #    # ######    #     # #    # ###### #####  
#        #  #  ##  ## #         #     # #    # #      #    # 
#  #### #    # # ## # #####     #     # #    # #####  #    # 
#     # ###### #    # #         #     # #    # #      #####  
#     # #    # #    # #         #     #  #  #  #      #   #  
 #####  #    # #    # ######    #######   ##   ###### #    #    
`;

const WINNER = `
#     #                               
#  #  # # #    # #    # ###### #####  
#  #  # # ##   # ##   # #      #    # 
#  #  # # # #  # # #  # #####  #    # 
#  #  # # #  # # #  # # #      #####  
#  #  # # #   ## #   ## #      #   #  
 ## ##  # #    # #    # ###### #    #
`

const hat = '^';
const hole = 'O';
const fieldCharacter = 'â–‘';
const pathCharacter = '*';

class Field {
    constructor(board) {
        this.board = board;
        this.userPos = [0, 0];
        this.isGameOver = false;
    }
    //print the current board state
    print() {
        for (var i = 0; i < board.length; i++) {
            console.log(board[i].join(''));
        }
    }
    //generate a random game field
    //todo: Create a field validator to ensure that the field generated by Field.generateField() can actually be solved.
    static generateField(height, width, percentage) {
        let field = [];
        for (var j = 0; j < height; j++) {
            let row = [];
            for (var i = 0; i < width; i++) {
                let random = Math.random();
                if (random <= percentage) {
                    row.push(hole);
                } else {
                    row.push(fieldCharacter);
                }
            }
            field.push(row)
        }
        //set user start position
        field[0][0] = pathCharacter;

        //generarte random hat position
        let hatPost = [Math.floor(Math.random() * height - 1) + 2, Math.floor(Math.random() * width)];
        field[hatPost[0]][hatPost[1]] = hat;

        return field
    }

    validateUserInput(input) {
        input = input.toLowerCase();
        if (input != 'd' && input != 's' && input != 'a' && input != 'w') {
            console.log('No valid input is not a valid move try with W, A, S, D');
        }
        this.move(input)
    };

    move(input) {
        let userTemPosition = this.userPos;

        switch (input) {
            case 'd':
                userTemPosition[1] = this.userPos[1] + 1;
                break
            case 's':
                userTemPosition[0] = this.userPos[0] + 1;
                break
            case 'a':
                userTemPosition[0] = this.userPos[1] - 1;
                break
            case 'w':
                userTemPosition[0] = this.userPos[0] - 1;
                break;
        }

        console.log(`Error fuera de ruta ${userTemPosition[1]} ${board[0].length}`);
        if (userTemPosition[1] < board[0].length) {

            let nextMove = board[userTemPosition[0]][userTemPosition[1]];

            switch (nextMove) {
                case hole:
                    term.red(GAME_OVER);
                    this.isGameOver = true;
                case hat:
                    term.green(WINNER);
                default:
                    board[this.userPos[0]][this.userPos[1]] = pathCharacter;
                    break;
            }

        } else {
            term.red(`Where are you going? You can't pass the edges` + '\n');
            userTemPosition = this.userPos;
        }


        this.print()
    }


    startGame() {
        while (!this.isGameOver) {
            let userInput = prompt('Which direction you like to move?');
            this.validateUserInput(userInput);
        }
    }


}

//helper function to "clean the screen"
function clean() {
    for (var i = 0; i < 50; i++) {
        console.log('\n');
    }
}

//generate a random board game
const board = Field.generateField(10, 15, 0.1);

const fielGame = new Field(board);
fielGame.print()

fielGame.startGame();

// while (isGameOn) {
//     let userInput = prompt('Which direction you like to move?');
//     clean()
//     isGameOn = fielGame.validateUserInput(userInput);
// }








